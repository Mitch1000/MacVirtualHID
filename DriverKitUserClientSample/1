//
//  Joystick.swift
//  HID
//
//  Created by Dirt Plantman on 2025-02-03.
import SwiftUI
import CoreHID
import IOKit
import Darwin.Mach


enum MyError: Error {
    case runtimeError(String)
}

struct GamepadReport {
    var buttons: UInt32 = 0
    var x: Int16 = 0
    var y: Int16 = 0
    var rx: Int16 = 0
    var ry: Int16 = 0
}

struct GamepadState {
    var buttonFlags: UInt32 = 0
    var lt: Int16 = 0
    var rt: Int16 = 0
    var lsX: Int16 = 0
    var lsY: Int16 = 0
    var rsX: Int16 = 0
    var rsY: Int16 = 0
}

class Joystick: ObservableObject {
//    var hidVirtualDevice: HIDVirtualDevice?
    var ioHidDevices: [IOHIDDevice] = []
    var virtgamepadConnect: io_connect_t = 0
    var virtgamepadService: io_service_t = 0
    var virtualInterator: io_iterator_t = 0
    var virtgamepadInput: [UInt64]
    
    public static let VIRTGAMEPAD_NAME = "Sunpad"    // gamepad name
    let VIRTGAMEPAD_SN = "1697"        // serial number
    let VIRTGAMEPAD_INPUT_COUNT = 10         // device arguments count
    let SERVICE_NAME = "SunshineDriver"
    let REAL_SERVICE_NAME = "AppleUserHIDDevice"
    public static let REALGAMEPAD_NAME = "MAGIC-NS"
//    let SERVICE_NAME = "AppleUserHIDDevice"
    let FOOHID_CREATE = 0
    let FOOHID_DESTROY = 1  // create selector
    let FOOHID_SEND = 2
    

    let GAMEPAD_ZEROBTNS: UInt32 = 0
    let GAMEPAD_BTN_A: UInt32 = 1 << 0
    let GAMEPAD_BTN_B: UInt32 = 1 << 1
    let GAMEPAD_BTN_X: UInt32 = 1 << 2
    let GAMEPAD_BTN_Y: UInt32 = 1 << 3
    let GAMEPAD_BTN_L: UInt32 = 1 << 4
    let GAMEPAD_BTN_R: UInt32 = 1 << 5
    let GAMEPAD_BTN_LT: UInt32 = 1 << 6
    let GAMEPAD_BTN_RT: UInt32 = 1 << 7
    let GAMEPAD_BTN_BACK: UInt32 = 1 << 8
    let GAMEPAD_BTN_START: UInt32 = 1 << 9
    let GAMEPAD_BTN_LS: UInt32 = 1 << 10
    let GAMEPAD_BTN_RS: UInt32 = 1 << 11
    let GAMEPAD_BTN_UP: UInt32 = 1 << 12
    let GAMEPAD_BTN_DOWN: UInt32 = 1 << 13
    let GAMEPAD_BTN_LEFT: UInt32 = 1 << 14
    let GAMEPAD_BTN_RIGHT: UInt32 = 1 << 15
    
    var isAButtonPress = false
    

    let joystickDescriptor: Data = Data([0x05, 0x01, 0x09, 0x05, 0xA1, 0x01, 0xA1, 0x00, 0x05, 0x01, 0x09, 0x30, 0x09, 0x31, 0x09, 0x33, 0x09, 0x34, 0x16, 0x00, 0x80, 0x26, 0xFF, 0x7F, 0x75, 0x10, 0x95, 0x04, 0x81, 0x02, 0x05, 0x01, 0x09, 0x32, 0x09, 0x35, 0x15, 0x00, 0x46, 0xFF, 0x00, 0x75, 0x08, 0x95, 0x02, 0x81, 0x02, 0x05, 0x09, 0x19, 0x01, 0x29, 0x10, 0x15, 0x00, 0x25, 0x01, 0x75, 0x01, 0x95, 0x10, 0x81, 0x02, 0xC0, 0xC0
    ])

    
    var id: Int
    
    init(id: Int) {
        self.virtgamepadInput = [UInt64](repeating: 0, count: VIRTGAMEPAD_INPUT_COUNT)
        self.id = id
    }


    func openService(productName: String) async throws -> Void {
        print("deviceSearch")
        try await openIOService()
        return
    }

    
    func openIOService() async throws -> Int {
        print("Handle IO")

//        let dic :CFDictionary = IOServiceMatching("IOHIDResource")
        let dic :CFDictionary = IOServiceNameMatching(SERVICE_NAME)
//        let matchingDict = [ kIOPropertyExistsMatchKey: "BatteryPercent" ] as NSDictionary
                
        var ret = IOServiceGetMatchingServices(kIOMasterPortDefault, dic, &virtualInterator)

        if(ret != KERN_SUCCESS) {
            print("IO Service Error: Failed to Match Device")
            return 1
        }
        
        var found = 0;
        var doLoop = true
        

        while(doLoop) {
            print("while loop")
            virtgamepadService = IOIteratorNext(virtualInterator)
            if (virtgamepadService != 0) {
                print("found service", virtgamepadService)
            } else {
                print("Service not found")
            }

            ret = IOServiceOpen(virtgamepadService, mach_task_self_, 0, &virtgamepadConnect);
            print("service open ret", ret)
            if(ret == KERN_SUCCESS) {
               found = 1;
               print("\n found! \n")
               break
             }

            if virtgamepadService == IO_OBJECT_NULL {
                doLoop = false
                break
            }

            let del = IOObjectRelease(virtgamepadService);
            print("releasing service", del)
        }
        print("service", virtgamepadService)
        print("connect", virtgamepadConnect)
        
        IOObjectRelease(virtualInterator);
        
//        print("found", found)
//
//        if (found != 1) {
//            print("Unable to find gamepad service")
//            return 1
//        }
//        print("\n ---- SERVICE FOUND ---- \n")
//
//
//        guard let client = HIDDeviceClient(deviceReference: deviceReference) else {
//            throw MyError.runtimeError("Could not create client")
//        }
//
//        print("client", client)
//        print("client product id", String(await client.productID, radix: 16))
//        print("client vendor id", String(await client.vendorID, radix: 16))
//
//        try await setupInputReporting(client: client)

        return 0
    }
    
    func getAsciiSentence(str: String) -> UInt64 {
        var sentence = "";
        print("Get Ascii Sentence", str)
        for char in str {
            let convert = Int(char.unicodeScalars.first!.value)
            sentence.append(String(convert))
        }
        print("Ascii Sentence \n", sentence)
        
        guard let bigIntSentence = NumberFormatter().number(from: sentence) else {
            print ("Error: Ascii Conversion failed")
            return UInt64(0)
        }
        
        print("Ascii Int Sentence \n", bigIntSentence)
        
        let intSentence = UInt64(bigIntSentence)
        
        print(intSentence, "-------END ASCII------------- \n")

        return intSentence
    }
    
    func setupInput() -> [UInt64] {
        let deviceName = strdup(Joystick.VIRTGAMEPAD_NAME)
        
//        virtgamepadInput[0] = UInt64(bitPattern: Int64(Int(bitPattern: deviceName)))
        
        virtgamepadInput[0] = getAsciiSentence(str: Joystick.VIRTGAMEPAD_NAME)
        virtgamepadInput[1] = UInt64(strlen(Joystick.VIRTGAMEPAD_NAME))
        

        // Store the report descriptor and its length
        // Define the gamepad report descriptor as an array of UInt8
//        let gamepadReportDescriptor: [UInt8] = [0x05, 0x01]
        let gamepadReportDescriptor: [UInt8] = [0x05, 0x01, 0x09, 0x05, 0xA1, 0x01, 0xA1, 0x00, 0x05, 0x01, 0x09, 0x30, 0x09, 0x31, 0x09, 0x33, 0x09, 0x34, 0x16, 0x00, 0x80, 0x26, 0xFF, 0x7F, 0x75, 0x10, 0x95, 0x04, 0x81, 0x02, 0x05, 0x01, 0x09, 0x32, 0x09, 0x35, 0x15, 0x00, 0x46, 0xFF, 0x00, 0x75, 0x08, 0x95, 0x02, 0x81, 0x02, 0x05, 0x09, 0x19, 0x01, 0x29, 0x10, 0x15, 0x00, 0x25, 0x01, 0x75, 0x01, 0x95, 0x10, 0x81, 0x02, 0xC0, 0xC0]

        // Convert the array to an unsafe pointer and get its raw pointer (memory address)
        // let pointer = UnsafeRawPointer(gamepadReportDescriptor)

        // Convert the pointer to a UInt64 value
        // virtgamepadInput[6] = UInt64(bitPattern: Int128(Int(bitPattern: pointer)))



        // Convert the serial number to a C string and store its address
        // let serialNumber = strdup(VIRTGAMEPAD_SN)
        // virtgamepadInput[4] = UInt64(bitPattern: Int64(Int(bitPattern: serialNumber)))

        virtgamepadInput[2] = getAsciiSentence(str: VIRTGAMEPAD_SN) 
        virtgamepadInput[3] = UInt64(strlen(VIRTGAMEPAD_SN))

        // Store the vendor ID and product ID
        virtgamepadInput[4] = 0x054c
        virtgamepadInput[5] = 0x05c4

        let deviceDescriptorString = "67093259680115789777373135783131767319300319141519641241528218698414758466682765338713442932187586116480062797787024513302786166059841545697100515623747776"

        let maxDeviceHidInputValues: Int = 4;
        let deviceHidInputCount = 1...4
        
        for i in deviceHidInputCount {
            

        }

        virtgamepadInput[6] = UInt64(gamepadReportDescriptor.count)
        virtgamepadInput[7] = UInt64(gamepadReportDescriptor.count)
        virtgamepadInput[8] = UInt64(gamepadReportDescriptor.count)

        return virtgamepadInput;
    }

    func callCreateMethod() async throws {
        print("\n call create method")
        print("attempt create \n")
        print("service", virtgamepadService)
        print("connect", virtgamepadConnect)
        
        let gamepadInput = setupInput();
         
        let outputCnt: UnsafeMutablePointer<UInt32>? = nil
        
        let ret = IOConnectCallScalarMethod(
            virtgamepadConnect,
            UInt32(FOOHID_CREATE),
            gamepadInput,
            UInt32(VIRTGAMEPAD_INPUT_COUNT),
            nil,
            outputCnt
        )
        
        
        print("create ret", ret)
        

        if(ret == KERN_SUCCESS) {
            print("IOConnectCallScalarMethod - Create - succeeded")
        } else {
            print("IOConnectCallScalarMethod - Create - failed with error: \(ret)")
        }
    }
    
    func callDestroyMethod() async throws {
        let deviceName = strdup(Joystick.VIRTGAMEPAD_NAME)
        
        var destroyArguments = [UInt64](repeating: 0, count: 2)
        destroyArguments[0] = UInt64(bitPattern: Int64(Int(bitPattern: deviceName)))
        destroyArguments[1] = UInt64(strlen(deviceName!))
        
        let outputCnt: UnsafeMutablePointer<UInt32>? = nil
        
        let ret = IOConnectCallScalarMethod(
            virtgamepadConnect,
            UInt32(FOOHID_DESTROY),
            virtgamepadInput,
            UInt32(2),
            nil,
            outputCnt
        )
        
        if(ret == KERN_SUCCESS) {
            print("IOConnectCallScalarMethod - Destroy - succeeded")
        } else {
            print("IOConnectCallScalarMethod - Destroy - failed with error: \(ret)")
        }
    }
    
    
    func getGamepadData() -> GamepadState {
//        let ABUTTON_PRESS_DATA: Data = Data([02, 00, 08, 80, 67, 80, 80, 00])
//        let INITIAL_DATA: Data = Data([00, 00, 08, 80, 67, 80, 80, 00])
        var gamepadState = GamepadState()
        if isAButtonPress {
            gamepadState.buttonFlags = GAMEPAD_BTN_A
        }

        return gamepadState
    }
    
    func sendButtonPress(gamepadState: GamepadState) async throws {
//        guard let pressDevice = self.hidVirtualDevice else {
//            print("Cannot send button press to virtual gamepad")
//            return
//        }
//        try await pressDevice.dispatchInputReport(data: data, timestamp: SuspendingClock.now)

            // Define the gamepad report structure
   
            
            var gamepad = GamepadReport()
            let sendCount = 4
            var send: [UInt64] = Array(repeating: 0, count: sendCount)
            
            // Assuming `virtgamepadInput` is an array of strings or similar
            let deviceName = virtgamepadInput[0]
        
            send[0] = UInt64(bitPattern: Int64(bitPattern: deviceName))
            let nameString = String(virtgamepadInput[0])
            send[1] = UInt64(nameString.count) // name length
        
        
            let data = withUnsafePointer(to: &gamepad) { pointer in
                UInt64(UInt(bitPattern: pointer))
            }

            send[2] = data // gamepad struct
            send[3] = UInt64(MemoryLayout<GamepadReport>.size) // gamepad struct len
            
            let flags = gamepadState.buttonFlags
            
            // Reset buttons
            gamepad.buttons = GAMEPAD_ZEROBTNS
            
            // Map buttons
            if flags & GAMEPAD_BTN_LS != 0 { gamepad.buttons |= GAMEPAD_BTN_LS }
            if flags & GAMEPAD_BTN_RS != 0 { gamepad.buttons |= GAMEPAD_BTN_RS }
            if flags & GAMEPAD_BTN_L != 0 { gamepad.buttons |= GAMEPAD_BTN_L }
            if flags & GAMEPAD_BTN_R != 0 { gamepad.buttons |= GAMEPAD_BTN_R }
            if flags & GAMEPAD_BTN_START != 0 { gamepad.buttons |= GAMEPAD_BTN_START }
            if flags & GAMEPAD_BTN_BACK != 0 { gamepad.buttons |= GAMEPAD_BTN_BACK }
            if flags & GAMEPAD_BTN_A != 0 { gamepad.buttons |= GAMEPAD_BTN_A }
            if flags & GAMEPAD_BTN_B != 0 { gamepad.buttons |= GAMEPAD_BTN_B }
            if flags & GAMEPAD_BTN_X != 0 { gamepad.buttons |= GAMEPAD_BTN_X }
            if flags & GAMEPAD_BTN_Y != 0 { gamepad.buttons |= GAMEPAD_BTN_Y }
            if flags & GAMEPAD_BTN_UP != 0 { gamepad.buttons |= GAMEPAD_BTN_UP }
            if flags & GAMEPAD_BTN_DOWN != 0 { gamepad.buttons |= GAMEPAD_BTN_DOWN }
            if flags & GAMEPAD_BTN_LEFT != 0 { gamepad.buttons |= GAMEPAD_BTN_LEFT }
            if flags & GAMEPAD_BTN_RIGHT != 0 { gamepad.buttons |= GAMEPAD_BTN_RIGHT }

            
            // Map triggers
            if gamepadState.lt > 0 { gamepad.buttons |= GAMEPAD_BTN_LT }
            if gamepadState.rt > 0 { gamepad.buttons |= GAMEPAD_BTN_RT }
            
            // Map sticks
            gamepad.x  = Int16(gamepadState.lsX)
            gamepad.y  = Int16(-gamepadState.lsY)
            gamepad.rx = Int16(gamepadState.rsX)
            gamepad.ry = Int16(-gamepadState.rsY)
            
        
            // Update Joystick
            let outputCnt: UnsafeMutablePointer<UInt32>? = nil
            // Assuming `virtgamepadConnect` and `FOOHID_SEND` are defined elsewhere
            let ret = IOConnectCallScalarMethod(
                virtgamepadConnect,
                UInt32(FOOHID_SEND),
                send,
                UInt32(sendCount),
                nil,
                outputCnt
            )

        
            if ret != KERN_SUCCESS {
                print(ret)
                print("Gamepad: Unable to send message to HID device.")
            }
    }
    
    func freeGamePad() {
        let ret = IOServiceClose(virtgamepadConnect)
        print("release ret", ret)
        
        let remove = IOObjectRelease(virtgamepadService);
        print("releasing service", remove)
        NSApplication.shared.terminate(nil)
    }
    
    func updateGamepad() async throws {
        while (true) {
            let seconds = 0.01
            try await Task.sleep(nanoseconds: UInt64(seconds * Double(NSEC_PER_SEC)))
            try await sendButtonPress(gamepadState: getGamepadData())
        }
    }
    
    
    func pressAButton() {
        isAButtonPress = true
    }
    
    func reset() {
        isAButtonPress = false
    }
}

